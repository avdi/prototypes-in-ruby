#+TITLE: Programming with Prototypes
#+PROPERTY: noweb strip-export

* Introduction

When you think of the term "object-oriented programming", one of the
first associated words that springs to mind is probably "classes". For
much of the history of the OOP paradigm, it has been almost
inextricably linked with the idea of classes. Classes serve as "object
factories": they hold the blueprint for new objects, and can be called
upon to manufacture as many as needed. Each object, or /instance/, has
its state, but each derives its behavior from the class. 

For all that classes have gone hand-in-hand with OOP for decades, they
aren't the only way to build families of objects with shared
behavior. The most common alternative to /class-based/ programming is
/prototype-based/ programming. Languages that use prototypes rather
than classes include [[http://en.wikipedia.org/wiki/Self_(programming_language)][Self]], [[http://en.wikipedia.org/wiki/Io_(programming_language)][Io]], and (most well known of all)
JavaScript.

* Prototypes in Ruby

So how do we write OO programs without classes? Let's explore this
question in Ruby. We'll use the example of a text-adventure game in
the style of "[[http://en.wikipedia.org/wiki/Colossal_Cave_Adventure][Colossal Cave Adventure]]". This is one of my favorite
programming examples for object-oriented systems, since it involves
modeling a virtual world of interacting objects, including characters,
items, and interconnected rooms.

We open up an interactive Ruby session, and start typing. We start
with an =adventurer= object. This object will serve as our avatar in
the game's world, translating our commands into interactions between
objects.

#+name: adventurer
#+BEGIN_SRC ruby
  adventurer = Object.new
#+END_SRC

The first ability we give to our adventurer is the ability to look at
its surroundings. The =look= command will cause the adventurer to
output a description of its current location.

#+name: look
#+BEGIN_SRC ruby
  def adventurer.look
    puts location.description
  end
#+END_SRC

Of course, this means it needs to have a current location to look at,
so we add an attribute called =location=. We do this by opening up the
=adventurer= object's singleton class and adding an =attr_accessor=.

#+name: location
#+BEGIN_SRC ruby
  class << adventurer
    attr_accessor :location
  end
#+END_SRC

Then we add a starting location, called =end_of_road=, and put the
adventurer in that location.

#+name: end_of_road
#+BEGIN_SRC ruby
  end_of_road = Object.new
  def end_of_road.description
    <<END
  You are standing at the end of a road before a small brick building.
  Around you is a forest.  A small stream flows out of the building and
  down a gully.
  END
  end
  
  adventurer.location = end_of_road
#+END_SRC

Now we can tell our adventurer to take a look around.

#+BEGIN_SRC ruby :results output :cache yes
  #<<adventurer>>
  #<<look>>
  #<<location>>
  #<<end_of_road>>

  adventurer.look
#+END_SRC

#+RESULTS[9f282080e652750e7fe031249580399c267a6d1e]:
: You are standing at the end of a road before a small brick building.
: Around you is a forest.  A small stream flows out of the building and
: down a gully.

So far we've created an adventurer and a starting room without any
kind of =Adventurer= or =Room= classes. This adventure is getting off
to a good start! Although, if we're going to be creating a lot of
these objects we'd like for the process to be a little less
verbose. We decide to take a step back and build some syntax sugar
before moving onward.

We start with an =ObjectBuilder= helper class. Yes, this is a class
when we are supposed to be using only prototypes. However, Ruby
doesn't offer a lot of support for prototype-based programming out of
the box, so we have to build our tools with the class-oriented
materials at hand. This is intended to be behind-the-scenes support
code. In other words, pay no attention to the man behind the green
curtain.

#+name: ObjectBuilder
#+BEGIN_SRC ruby
  class ObjectBuilder
    def initialize(object)
      @object = object
      @class  = object.singleton_class
    end
  
    def respond_to_missing?(missing_method, include_private=false)
      missing_method =~ /=\z/
    end
  
    def method_missing(missing_method, *args, &block)
      if respond_to_missing?(missing_method)
        method_name = missing_method.to_s.sub(/=\z/, '')
        value       = args.first
        ivar_name   = "@#{method_name}"
       if value.is_a?(Proc)
          define_code_method(method_name, ivar_name, value)
        else
          define_value_method(method_name, ivar_name, value)
        end
      else
        super
      end
    end
  
    def define_value_method(method_name, ivar_name, value)
      @object.instance_variable_set(ivar_name, value)
      @class.class_eval do
        define_method(method_name) do
          instance_variable_get(ivar_name)
        end
      end
    end
  
    def define_code_method(method_name, ivar_name, implementation)
      @object.instance_variable_set(ivar_name, implementation)
      @class.class_eval do
        define_method(method_name) do |*args|
          instance_exec(*args, &instance_variable_get(ivar_name))
        end
      end
    end
  end  
#+END_SRC

There's a lot going on in this class. Going over it line-by-line might
be interesting in its own right, but it wouldn't advance our
understanding of prototype-based programming all that much. Suffice to
say for now that this class can help us add new attributes and methods
to a singleton object using a concise assignment-style syntax. This
will make more sense when we start to use it.

We add another bit of syntax sugar: a global method named =Object=
(not to be confused with the class of the same name). 

#+name: Object
#+BEGIN_SRC ruby
  def Object(&definition)
    obj = Object.new
    obj.singleton_class.instance_exec(ObjectBuilder.new(obj), &definition)
    obj
  end
#+END_SRC

This method takes a block, instantiates a new object, and evaluates
the block in the context of the object's singleton class, passing an
=ObjectBuilder= as a block argument. Then it returns the new object.

Now we recreate our adventurer using this new helper.

#+name: adventurer2
#+BEGIN_SRC ruby
  adventurer = Object { |o|
    o.location = end_of_road
    attr_writer :location
  
    o.look = ->(*args) {
      puts location.description
    }
  }
#+END_SRC

The combination of the =Object= factory method and the =ObjectBuilder=
gives us a convenient, powerful notation for creating new ad-hoc
objects. We can create attribute reader methods and assign the value
of the attribute all at once:

#+BEGIN_SRC ruby
  o.location = end_of_road
#+END_SRC

We can use standard Ruby class-level code:

#+BEGIN_SRC ruby
  attr_writer :location
#+END_SRC

And finally we can create new methods by assigning a lambda to a new
attribute on the object builder:

#+BEGIN_SRC ruby
  o.look = ->(*args) {
    puts location.description
  }
#+END_SRC

We've deliberately avoided defining methods using =def= or
=define_method=. We'll get into the reasons for that later on.

We take a moment to make sure our shiny new adventurer still works the
same as before.

#+BEGIN_SRC ruby :results output :cache yes
  #<<adventurer>>
  #<<look>>
  #<<location>>
  #<<end_of_road>>
  #<<ObjectBuilder>>
  #<<Object>>
  #<<adventurer2>>

  adventurer.look
#+END_SRC

#+RESULTS[837b41970f9b165483273bf3c14cb6d4dbdcd541]:
: You are standing at the end of a road before a small brick building.
: Around you is a forest.  A small stream flows out of the building and
: down a gully.

We decide it's time to let our adventurer object stretch its legs a
bit. We want to give it the ability to move from location to
location. First, we make a small modification to our =Object()= method.

#+name: Object2
#+BEGIN_SRC ruby
  def Object(object=nil, &definition)
    obj = object || Object.new
    obj.singleton_class.instance_exec(ObjectBuilder.new(obj), &definition)
    obj
  end
#+END_SRC

Now along with creating new objects, =Object()= can also augment
an existing object which is passed in as an argument.

We pass the =adventurer= to =Object()=, and add a new =#go=
method. This method will take a direction (like =:east=), and attempt
to move to the new location using the =exits= association on its
current location.

#+name: adventurer_go
#+BEGIN_SRC ruby
  Object(adventurer) { |o|
    o.go = ->(direction){
      if(destination = location.exits[direction])
        self.location = destination
        puts location.description
      else
        puts "You can't go that way"
      end
    }
  }
#+END_SRC

We add a destination room to the system:

#+name: wellhouse
#+BEGIN_SRC ruby
  wellhouse = Object { |o|
    o.description = <<END
  You are inside a small building, a wellhouse for a large spring.
  END
  }
#+END_SRC

Then we add an =exits= Hash to =end_of_road=, with an entry saying
that the =wellhouse= is to the =:north=.

#+name: end_of_road_exits
#+BEGIN_SRC ruby
  Object(end_of_road) { |o|
    o.exits = {north: wellhouse}
  }
#+END_SRC

With that done, we are now ready to set off on our journey!

#+BEGIN_SRC ruby :results output :cache yes
  #<<adventurer>>
  #<<look>>
  #<<location>>
  #<<end_of_road>>
  #<<ObjectBuilder>>
  #<<Object>>
  #<<adventurer2>>
  #<<Object2>>
  #<<adventurer_go>>
  #<<wellhouse>>
  #<<end_of_road_exits>>

  adventurer.go(:north)
#+END_SRC

#+RESULTS:
: You are inside a small building, a wellhouse for a large spring.

We try to go north again, expecting to see the admonition "You can't
go that way" as we bump into the wall.

#+BEGIN_SRC ruby
  adventurer.go(:north)
#+END_SRC

Instead, we get an exception:

#+BEGIN_EXAMPLE
-:82:in `block (2 levels) in <main>': undefined method `exits' for 
#<Object:0x0000000434d768> (NoMethodError)
	from -:56:in `instance_exec'
	from -:56:in `block (2 levels) in define_code_method'
	from -:100:in `<main>'
#+END_EXAMPLE

This is because we never got around to adding an =exits= Hash to
=wellhouse=. We could go ahead and do that now. But as we think about
it, we realize that now that our adventurer is capable of travel, it
would make sense if all rooms started out with an empty =exits= Hash,
instead of us having to add it manually every time.

Toward that end, we create a /prototypical room/.

#+name: room
#+BEGIN_SRC ruby
  room = Object { |o|
    o.exits = {}
  }
#+END_SRC

We then experiment with creating a new =wellhouse=, this one based on
the =room= prototype. We do this by simply cloning the =room=
object. We use =#clone= rather than =#dup= because =#clone= copies
singleton class methods.

#+name: new_wellhouse
#+BEGIN_SRC ruby
  new_wellhouse = room.clone
  
  new_wellhouse.exits[:south] = end_of_road
#+END_SRC

We quickly uncover a problem with this naive cloning
technique. Because Ruby's =#clone= (as well as =#dup=) are /shallow
copies/, =room= and =new_wellhouse= now share the same =exits= Hash.

#+BEGIN_SRC ruby :results output :cache yes :exports both
  #<<adventurer>>
  #<<look>>
  #<<location>>
  #<<end_of_road>>
  #<<ObjectBuilder>>
  #<<Object>>
  #<<adventurer2>>
  #<<Object2>>
  #<<adventurer_go>>
  #<<wellhouse>>
  #<<end_of_road_exits>>
  #<<room>>
  #<<new_wellhouse>>

  require 'pp'

  puts "new_wellhouse exits:"
  pp new_wellhouse.exits
  puts "room exits:"
  pp room.exits
#+END_SRC

#+RESULTS[6eada0454028f26f63d47a519783119c543720c7]:
#+begin_example
new_wellhouse exits:
{:south=>
  #<Object:0x000000032cc290
   @exits=
    {:north=>
      #<Object:0x000000032cb598
       @description=
        "You are inside a small building, a wellhouse for a large spring.\n">}>}
room exits:
{:south=>
  #<Object:0x000000032cc290
   @exits=
    {:north=>
      #<Object:0x000000032cb598
       @description=
        "You are inside a small building, a wellhouse for a large spring.\n">}>}
#+end_example

To fix this, we customize how Ruby performs cloning by redefining
[[http://jonathanleighton.com/articles/2011/initialize_clone-initialize_dup-and-initialize_copy-in-ruby/][=Object#initialize_clone=]]. Our version does a one-layer-deep copy of
instance variables.

#+name: initialize_clone
#+BEGIN_SRC ruby
class Object
  def initialize_clone(other)
    instance_variables.each do |ivar_name|
      other.instance_variable_set(
        ivar_name,
        instance_variable_get(ivar_name).dup)
    end
  end
end
#+END_SRC

Then we recreate =room= and =new_wellhouse=, and confirm that they no
longer share exits.

#+name: requires
#+BEGIN_SRC ruby :exports none
  require 'pp'
#+END_SRC

#+BEGIN_SRC ruby :results output :exports both
  #<<requires>>
  #<<adventurer>>
  #<<look>>
  #<<location>>
  #<<end_of_road>>
  #<<ObjectBuilder>>
  #<<Object>>
  #<<adventurer2>>
  #<<Object2>>
  #<<adventurer_go>>
  #<<wellhouse>>
  #<<end_of_road_exits>>
  #<<room>>
  #<<new_wellhouse>>
  #<<initialize_clone>>

  room = Object { |o|
    o.exits = {}
  }
  
  new_wellhouse = room.clone
  
  new_wellhouse.exits[:south] = end_of_road

  puts "new_wellhouse exits:"
  pp new_wellhouse.exits
  puts "room exits:"
  pp room.exits
#+END_SRC

#+RESULTS:
#+begin_example
new_wellhouse exits:
{:south=>
  #<Object:0x000000038e8f48
   @exits=
    {:north=>
      #<Object:0x000000038e8250
       @description=
        "You are inside a small building, a wellhouse for a large spring.\n">}>}
room exits:
{}
#+end_example

This technique---cloning a prototypical object in order to create new
objects---is the most basic form of prototype-based programming. In
fact, the "Kevo" research language (I'd link to it, but all the
information about it seems to have fallen off the Internet) used
copying as the sole way to share behavior between objects.

There are drawbacks to copying, however. It's a very static way to
share behavior between objects. Clones of =room= only share the
behavior which was defined at the time of the copy. If we were to
modify =room=, we'd have to recreate the =new_wellhouse= object once
again in order to take advantage of any new methods added to it.

We also can't add any new behavior to our existing =wellhouse= object
this way. We'd have to throw away our program's state and rebuild it,
this time cloning our =end_of_road= and =wellhouse= objects from
=room=.

In Ruby, we're used to being able to make changes to a live session
and see how they play out. Thus far, we've done this all in a live
interpreter session. It seems a shame to have to lose our state and
start again. So we decide to find out if we can come up with a more
dynamic form of prototypical inheritance than plain copying.

We start by adding a helper method called =#implementation_of= to
Object. Given a method name that the object supports, it will return a
=Proc= object containing the code of that method. We make it aware of
the style of method definition used in =ObjectBuilder=, where the
implementation =Procs= of new methods were stored in instance
variables named for the methods.

#+name: implementation_of
#+BEGIN_SRC ruby
  class Object
    def implementation_of(method_name)
      if respond_to?(method_name)
        implementation = instance_variable_get("@#{method_name}")
        if implementation.is_a?(Proc)
          implementation
        elsif instance_variable_defined?("@#{method_name}")
          # Assume the method is a reader
          ->{ instance_variable_get("@#{method_name}") }
        else
          method(method_name).to_proc
        end
      end
    end
  end
#+END_SRC

We then define a new kind of =Module=, called =Prototype=. 

#+name: Prototype
#+BEGIN_SRC ruby
  class Prototype < Module
    def initialize(target)
      @target = target
      super() do
        define_method(:respond_to_missing?) do |missing_method, include_private|
          target.respond_to?(missing_method)
        end
  
        define_method(:method_missing) do |missing_method, *args, &block|
          if target.respond_to?(missing_method)
            implementation = target.implementation_of(missing_method)
            instance_exec(*args, &implementation)
          else
            super(missing_method, *args, &block)
          end
        end
      end
    end
  end
#+END_SRC

A =Prototype= is instantiated with a prototypical object. When a
=Prototype= instance is added to an object using =#extend=, it makes
the methods of the prototype available to the extended object. It does
this by implementing =#method_missing?= (and the associated
=#respond_to_missing?=). When a message is sent to the extended object
that matches a method on the prototype object, the =Prototype= grabs
the implementation =Proc= from the prototype. Then it uses
=#instance_exec= to evaluate the =prototype='s method in the context
of the extended object. In effect, the extended object "borrows" a
method from the prototype object for just long enough to execute it.

Note that this is different from delegation. In delegation, one object
hands off a message to be handled by another object. If object =a=
delegates a =#foo= message to object =b=, using, for instance, Ruby's
=forwardable= library, =self= in that method will be object =b=. This
is easily demonstrated.

#+BEGIN_SRC ruby
  require 'forwardable'
  
  class A
    extend Forwardable
    attr_accessor :b
    def_delegator :b, :foo
  end
  
  class B
    def foo
      puts "executing #foo in #{self}"
    end
  end
  
  a = A.new
  a.b = B.new
  a.foo
  # >> executing #foo in #<B:0x00000003295e20>
#+END_SRC

But delegation is not what we want. We want to execute the methods
from prototypes as if they had been defined on the inheriting
object. We want this because we want them to work with the instance
variables of the inheriting object. If we send =wellhouse.exits=, we
want the reader method to show us the content of =wellhouse='s
=@exits= instance variable, not =room='s instance variable.

Remember how, in =ObjectBuilder=, we stored the implementations of
methods as =Procs= in instance variables rather than defining them
directly as methods? This need to call prototype methods on the
inheriting object is the reason for that. In Ruby, it is not possible
to execute a method from class A on an instance of unrelated class
B. Since in this program we are using the singleton classes of objects
to define all of their methods, Ruby considers all of our objects as
belonging to different classes for the purposes of method binding. We
can see this if we try to rebind a method from =room= onto =wellhouse=
and then call it:

#+BEGIN_SRC ruby
  room.method(:exits).unbind.bind(wellhouse)
#+END_SRC

#+BEGIN_EXAMPLE
-:115:in `bind': singleton method called for a different object (TypeError)
	from -:115:in `<main>'
#+END_EXAMPLE

By storing the implementation of methods as raw =Procs=, without any
association to a specific class, we are able to take the
implementations and =instance_exec= them in other contexts.

The last change we make to support dynamic prototype inheritance is to
add a new =#prototype= method to our =ObjectBuilder=.

#+name: ObjectBuilder_prototype
#+BEGIN_SRC ruby
  class ObjectBuilder
    def prototype(proto)
      # Leave method implementations on the proto object
      ivars = proto.instance_variables.reject{ |ivar_name|
        proto.respond_to?(ivar_name.to_s[1..-1]) &&
        proto.instance_variable_get(ivar_name).is_a?(Proc)
      }
      ivars.each do |ivar_name|
        unless @object.instance_variable_defined?(ivar_name)
          @object.instance_variable_set(
            ivar_name,
            proto.instance_variable_get(ivar_name).dup)
        end
      end
      @object.extend(Prototype.new(proto))
    end
  end
#+END_SRC

This method does two things:

1. It copies instance variables from a prototype object to the object
   being built.
2. It extends the object being built with a =Prototype= module
   referencing the prototype object.

We can now use all of this new machinery to dynamically add =room= as
a prototype of =wellhouse=. We are then able to set the south exit to
point back to =end_of_road=, using the =exits= association that
=wellhouse= now inherits from =room=.

#+name: wellhouse2
#+BEGIN_SRC ruby
  Object(wellhouse) { |o|
    o.prototype room
  }
  wellhouse.exits[:south] = end_of_road
#+END_SRC

#+name: step1
#+BEGIN_SRC ruby
  adventurer.location = wellhouse
#+END_SRC

#+BEGIN_SRC ruby :results output
  #<<requires>>
  #<<adventurer>>
  #<<look>>
  #<<location>>
  #<<end_of_road>>
  #<<ObjectBuilder>>
  #<<Object>>
  #<<adventurer2>>
  #<<Object2>>
  #<<adventurer_go>>
  #<<wellhouse>>
  #<<end_of_road_exits>>
  #<<room>>
  #<<new_wellhouse>>
  #<<initialize_clone>>
  #<<step1>>
  #<<implementation_of>>
  #<<Prototype>>
  #<<ObjectBuilder_prototype>>
  #<<wellhouse2>>

  puts "* trying to go north from wellhouse"
  adventurer.go(:north)

  puts "* going back south"
  adventurer.go(:south)
#+END_SRC

#+RESULTS:
: * trying to go north from wellhouse
: You can't go that way
: * going back south
: You are standing at the end of a road before a small brick building.
: Around you is a forest.  A small stream flows out of the building and
: down a gully.

We now have some powerful tools at our disposal for composing objects
from prototypes. We quickly proceed to implement the ability to pick
up and drop items to our game. We start by creating a prototypical
"container" object, which has an array of items and the ability to
transfer an item from itself to another container.

#+name: container
#+BEGIN_SRC ruby
  container = Object { |o|
    o.items = []
    o.transfer_item = ->(item, recipient) {
      recipient.items << items.delete(item)
    }
  }  
#+END_SRC

We then make the =adventurer= a container, and add some commands for
taking items, dropping items, and listing the adventurer's current
inventory. 

#+name: adventurer_items
#+BEGIN_SRC ruby
  Object(adventurer) {|o|
    o.prototype container
  
    o.look = -> {
      puts location.description
      location.items.each do |item|
        puts "There is #{item} here."
      end
    }
  
    o.take = ->(item_name) {
      item = location.items.detect{|item| item.include?(item_name) }
      if item
        location.transfer_item(item, self)
        puts "You take #{item}."
      else
        puts "You see no #{item_name} here"
      end
    }
  
    o.drop = ->(item_name) {
      item = items.detect{|item| item.include?(item_name) }
      if item
        transfer_item(item, location)
        puts "You drop #{item}."
      else
        puts "You are not carrying #{item_name}"
      end
    }
  
    o.inventory = -> {
      items.each do |item|
        puts "You have #{item}"
      end
    }
  }
#+END_SRC

For convenience, we've implemented =#take= and =#drop= so that they
can accept any substring of the intended object's name.

Next we make =wellhouse= a container, and add a list of starting items
to it.

#+name: wellhouse_items
#+BEGIN_SRC ruby
  Object(wellhouse) { |o|
    o.prototype container
    o.items = [
      "a shiny brass lamp",
      "some food",
      "a bottle of water"
    ]
    o.exits = {south: end_of_road}
  }
#+END_SRC

As you may recall, =wellhouse= already has a prototype: =room=. But
this is not a problem. One of the advantages of our dynamic
prototyping system is that objects may have any number of
prototypes. Since prototyping is implemented using specialized
modules, when an object is sent a message it can't handle iself, Ruby
will keep searching up an object's ancestor chain, from one
=Prototype= to the next, looking for a matching method. (This also
puts us one up on JavaScript's single-inheritance prototype system!)

Finally, we make =end_of_road= a container.

#+name: end_of_road_items
#+BEGIN_SRC ruby
  Object(end_of_road) { |o|
    o.prototype container
  }
#+END_SRC

We then proceed to tell our adventurer to pick up a bottle of water
from the wellhouse, and put it down at the end of the road.

#+RESULTS:
#+begin_example
> adventurer.go(:north)
You are inside a small building, a wellhouse for a large spring.
> adventurer.take("water")
You take a bottle of water.
> adventurer.inventory
You have a bottle of water
> adventurer.look
You are inside a small building, a wellhouse for a large spring.
There is a shiny brass lamp here.
There is some food here.
> adventurer.go(:south)
You are standing at the end of a road before a small brick building.
Around you is a forest.  A small stream flows out of the building and
down a gully.
> adventurer.drop("water")
You drop a bottle of water.
> adventurer.look
You are standing at the end of a road before a small brick building.
Around you is a forest.  A small stream flows out of the building and
down a gully.
There is a bottle of water here.
#+end_example

We've written the beginnings of a text adventure game in a
prototype-based style. Now, let's take a step back and talk about what
the point of this exercise was.

There is a strong argument to be made that prototype-based inheritance
more closely maps to how humans normally think through problems than
does class-based inheritance. Quoting the paper "[[http://citeseerx.ist.psu.edu/viewdoc/summary?doi%3D10.1.1.56.4713][Classes
vs. Prototypes: Some Philosophical and Historical Observations]]":

#+BEGIN_QUOTE
A typical argument in favor of prototypes is that people seem to be a
lot better at dealing with specific examples first, then generalizing
from them, than they are at absorbing general abstract principles
first and later applying them in particular cases...the ability to
modify and evolve objects at the level of individual objects reduces
the need for a priori classification and encourages a more iterative
programming and design style.
#+END_QUOTE

As we built up our adventure game, we immediately added concrete
objects to the system as soon as we thought them up. We added an
=adventurer=, and then an =end_of_road= for the adventurer to start
out in. Then later, as we added more objects, we generalized out
commonalities into objects like =room= and =container=. Our program
design emerged completely organically, and our abstractions emerged as
soon as we needed them, but no sooner. This kind of emergent, organic
design process is one of the ideals of agile software development, and
prototype-based systems seem to encourage it.

Obviously, the way we jammed prototypes into a class-based language
here is a horrendous hack. Please don't ever use this in a production
system. But the experience of writing code in a prototyped style can
be educational.  We can use what we've learned to influence our daily
coding. We might prototype (heh) a system's design by writing one-off
objects at first, adding methods to their singleton classes. Then, as
patterns of interaction emerge, we might capture the design using
classes. Prototypes can also teach us to do more with delegation and
composition, building families of collaborating objects rather than
hierarchies of related behavior.


* The Prototype Pattern

  But there's another, more concrete way that the prototype paradigm
  can inform our work. If you each over to the shelf where you keep
  your legally mandated copy of _Design Patterns_, and flip to page
  117, you will find the /Prototype Pattern/ documented in the section
  on creational patterns. The Prototype Pattern is a way to apply
  prototype-style thinking in a class-based language.

  Let's say that after working on our adventure game for a while, we
  decide to move it in the direction of a dungeon-crawl-style game. So
  along with rooms and items, there are also various
  semi-randomly-generated monsters who periodically confront the
  hero. Different types of monster have different stats, such as
  health, speed, and strength. They each have their own types of
  attack as well.

  We'd also like to be able to load up the list of monster types at
  run-time, from a user-editable file like this:

#+BEGIN_SRC yaml
  gnome:
    attack_text: hits you with a club!
    max_hit_points: 8
    strength: 5
    speed: 9
  troll:
    attack_text: attacks you with a pickaxe!
    max_hit_points: 12
    strength: 10
    speed: 5
  rabbit:
    attack_text: bites you with sharp, pointy teeth!
    max_hit_points: 50
    strength: 50
    speed: 50
#+END_SRC

  One way to model different monster types would be like this:

  #+BEGIN_SRC ruby
    class Monster
      attr_reader :health
      def initialize
        @health = max_hit_points
      end
    end
    
    class Gnome < Monster
      def name
        "gnome"
      end
    
      def attack_text
        "attacks you with a pickaxe"
      end
    
      def max_hit_points
        8
      end
    
      def strength
        5
      end
    
      def speed
        9
      end
    end
    
    g = Gnome.new
    # => #<Gnome:0x00000004020130 @health=8>
  #+END_SRC

  Here there is a =Monster= base class, and a subclass for each type
  of monster. But this doesn't really lend itself to dynamically
  loading arbitrary monster types from a file, so we look for other
  approaches.

  We experiment with one design that uses =MonsterDefinition= classes
  to hold the static attributes of different monsters. A
  =MonsterDefinition= can be told to =#spawn= a =Monster=
  instance. The =Monster= instance has a reference back to its
  definition, as well as an instance-specific health meter
  (initialized based on the =max_hit_points= of the
  =MonsterDefinition=).

  #+BEGIN_SRC ruby
    class MonsterDefinition
      attr_accessor :name,
                    :attack_text,
                    :max_hit_points,
                    :strength,
                    :speed
    
      def initialize(attributes={})
        attributes.each do |name, value|
          public_send("#{name}=", value)
        end
      end
    
      def spawn
        Monster.new(self)
      end
    end
    
    class Monster
      attr_reader :definition
      attr_accessor :health
    
      def initialize(definition)
        @definition = definition
        @health = definition.max_hit_points
      end
    end
    
    gnome_def = MonsterDefinition.new(
      name: "gnome",
      attack_text: "attacks you with a pickaxe!",
      max_hit_points: 8,
      strength: 5,
      speed: 9)
    
    g = gnome_def.spawn
    # => #<Monster:0x0000000401e268
    #     @definition=
    #      #<MonsterDefinition:0x0000000401e9e8
    #       @attack_text="attacks you with a pickaxe!",
    #       @max_hit_points=8,
    #       @name="gnome",
    #       @speed=9,
    #       @strength=5>,
    #     @health=8>
  #+END_SRC

  This approach seems promising. But as we reflect on it, we realize
  that we're probably going to keep adding more of these
  definition/instance pairs of classes. =RoomDefinition=/=Room=,
  =ItemDefinition=/=Item=. This feels like an awful lot of ceremony.

  Finally, we hit upon using the Prototype Pattern. In this version,
  there is only one class: =Monster=. It has slots for both static
  attributes (like =name=, and =strength=), and dynamic attributes
  like =health=.

  #+BEGIN_SRC ruby
    class Monster
      attr_accessor :name,
                    :attack_text,
                    :max_hit_points,
                    :strength,
                    :speed,
                    :health
    
      def initialize(attributes={})
        attributes.each do |name, value|
          public_send("#{name}=", value)
        end
      end
    
      def initialize_dup(other)
        other.health = max_hit_points
      end
    end
  #+END_SRC

  To initialize our game's bestiary of possible monster types, we load
  up the YAML-formatted monster file and initialize a =Monster= for
  each entry. Dynamic attributes are simply left blank for now. These
  are our prototypes.

  #+BEGIN_SRC ruby
    require 'yaml'
    bestiary = YAML.load_file('monsters.yml').each_with_object({}) do
      |(name, attributes), collection|
      collection[name] = Monster.new(attributes.merge(name: name))
    end
  #+END_SRC

  When we want to set up a player encounter with a monster, we simply
  find the appropriate prototype monster, and duplicate it. The
  customized =#initialize_dup= method in =Monster= takes care of
  setting up an initial health meter for the cloned monster.

  #+BEGIN_SRC ruby
    rabbit = bestiary['rabbit'].dup
    # => #<Monster:0x00000000fbd948
    #     @attack_text="bites you with sharp, pointy teeth!",
    #     @max_hit_points=50,
    #     @name="rabbit",
    #     @speed=50,
    #     @strength=50>
    
  #+END_SRC

  we can easily generate random monsters:

  #+BEGIN_SRC ruby
    random_foe = bestiary.values.sample.dup
    # => #<Monster:0x00000000fc21f0
    #     @attack_text="attacks you with a pickaxe!",
    #     @max_hit_points=12,
    #     @name="troll",
    #     @speed=5,
    #     @strength=10>
    
  #+END_SRC

  This solution is both shorter and simpler than any of the others we
  looked at.

  The Prototype Pattern is, in my experience, one of the more
  overlooked of the Gang of Four patterns. It is useful in many
  situations. As another example, consider a web application where
  administrators build form templates and then users fill out the
  forms. One way to model this is to populate the form builder
  interface =FormDefinition= objects, containing instances of
  =TextFieldDefinition=, =CheckboxFieldDefinition=,
  =DateFieldDefinition=, and so on. Then, when the form definition is
  complete and ready for user input, a new =Form= object is created,
  using the =FormDefinition= as a guide, with =TextField=,
  =CheckboxField=, =DateField=, etc. objects "inside" of it.

  If we apply the Prototype Pattern to this problem, we once again do
  away with the definition/instance dichotomy. Instead, building a new
  form simply means assembling a =Form= object, where all of the form
  fields have empty or placeholder values. (This makes it
  exceptionally easy to show a live preview of the form as it is being
  built). The form is published by turning on a flag marking it as a
  "master" form. Whenever a user fills out the form, they are really
  filling out a duplicate of the master.

  _Design Patterns_ says that the Prototype Pattern is appropriate:

  #+BEGIN_QUOTE
  when a system should be should be independent of how its products
  are created, composed, and represented, /and/

  * when the classes to instantiate are specified at run-time, for
    example, by dynamic loading; /or/
  * to avoid building a class hierarchy of factories that parallels
    the class hierarchy of products; /or/
  * when instances of a class can have only one of a few different
    combinations of state. It may be more convenient to install a
    corresponding number of prototypes and clone them rather than
    instantiating the class manually, each time with the appropriate
    state.
  #+END_QUOTE

* Conclusion

  For veterans of class-based languages, using prototype-based OO can
  seem like entering a foreign land. But once you get over the initial
  strangeness, you come to realize that prototype thinking is not only
  fully compatible with OO ideals, it is also, in some ways, a simpler
  and more approachable way of thinking about problems. Using
  prototypes, you start out by focusing on concrete examples,
  gradually extracting out abstractions as needed. You spend less time
  thinking about where to draw the lines between different kinds of
  object, and more time building related families of objects.

  The lessons of the prototype-oriented mindset are not simply
  philosophical for users of class-based languages, either. The
  Prototype Pattern is a way to apply prototypes in a class-based
  system, one that can slash through complicated parallel inheritance
  hierarchies and provide a simple, flexible, and dynamic alternative.

  I hope you've found this trip through prototype-land illuminating
  and thought-provoking. I'm still a relative newb to this way of
  thinking, so if you have anything to add---other benefits of using
  prototypes; subtle gotchas; experiences from prototype-based
  languages, or alternative implementations of any of the code above,
  please don't hesitate to pipe up in the comments. Also, if you want
  clarifications about any of the gnarly metaprogramming I used to
  bash Ruby into a semblance of a prototype-based language, feel free
  to ask. Although I can't guarantee that the answers will make any
  more sense than the code :-)

  Happy hacking!
  
